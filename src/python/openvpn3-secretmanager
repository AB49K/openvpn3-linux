#!/usr/bin/python3
#  OpenVPN 3 Linux client -- Next generation OpenVPN client
#
#  Copyright (C) 2017 - 2018  OpenVPN Inc. <sales@openvpn.net>
#  Copyright (C) 2017 - 2018  David Sommerseth <davids@openvpn.net>
#
#  This program is free software: you can redistribute it and/or modify
#  it under the terms of the GNU Affero General Public License as
#  published by the Free Software Foundation, version 3 of the
#  License.
#
#  This program is distributed in the hope that it will be useful,
#  but WITHOUT ANY WARRANTY; without even the implied warranty of
#  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
#  GNU Affero General Public License for more details.
#
#  You should have received a copy of the GNU Affero General Public License
#  along with this program.  If not, see <https://www.gnu.org/licenses/>.
#

##
# @file  openvpn3-secretmanager
#
# @brief  This is a command line interface to allow adding and updating of libsecret
#         credentials for use with openvpn3-autoload


import argparse
import getpass
import random
import string
import gi
gi.require_version('Secret', '1')
from gi.repository import Secret


#Each stored password has a set of attributes which are later used to lookup the password.
#The names and types of the attributes are defined in a schema. The schema is usually defined once globally.

OpenVPN3_LINUX = Secret.Schema.new('OpenVPN.Store',
    Secret.SchemaFlags.NONE,
    {
        'Key': Secret.SchemaAttributeType.STRING,
    }
)

def GenerateKey():
    return ''.join(random.choices(string.ascii_lowercase, k=16))

def store_credentials():
    Key=GenerateKey()
    Password = getpass.getpass('Password: ')
    Secret.password_store_sync(OpenVPN3_LINUX, {'Key': Key}, Secret.COLLECTION_DEFAULT,
                               'OpenVPN Password', Password, None)
    print('Key for use in conf.autoload (Or to update your credentials later): "%s"' % Key)
def update_credentials():
    Key = input('Key: ')
    Password = getpass.getpass('Password: ')
    #Updates credentials by removing old ones and replacing with updated ones.
    #Returns True when success
    removed_password = Secret.password_clear_sync(OpenVPN3_LINUX, {'Key': Key}, None)
    if removed_password == False:
        print('Failed to remove existing Password, Do they exist?')
        exit()
    Secret.password_store_sync(OpenVPN3_LINUX, {'Key': Key}, Secret.COLLECTION_DEFAULT,
                               'OpenVPN Password', Password, None)
    print('Updated password for ' + Key)

if __name__ == '__main__':
    parser = argparse.ArgumentParser()
    subp = parser.add_subparsers(dest='subparser')
    store_credentials_parser = subp.add_parser('store', help='Stores new OpenVPN credentials.')
    update_credentials_parser = subp.add_parser('update', help='Updates existing OpenVPN credentials.')
    args = parser.parse_args()
    if args.subparser == 'store':
        store_credentials()
    elif args.subparser == 'update':
        update_credentials()






    
    
    
    
